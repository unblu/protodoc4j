buildscript {
  repositories {
    mavenCentral()
  }
  configurations.classpath {
    resolutionStrategy {
      //This is required by 'grgit' version '4.1.1':
      force 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    }
  }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.ajoberstar.git-publish' version '3.0.1'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.diffplug.spotless' version '6.1.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'net.researchgate.release' version '2.6.0'
}

wrapper {
    gradleVersion = '8.10.2'
}

String groupId = 'com.unblu.protodoc4j'
group = groupId

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    mavenCentral()
}

signing {
    useGpgCmd()
    sign(publishing.publications)
}

tasks.withType(Sign) {
    onlyIf {
        project.hasProperty('signing.gnupg.keyName')
    }
}

dependencies {
    implementation libs.jackson.annotations
    testImplementation libs.jackson.databind
    testImplementation libs.junit.api
    testImplementation libs.assertj.core
    testImplementation libs.assertj.json.unit
    testRuntimeOnly libs.junit.engine
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'Proto Doc Model'
                description = 'Java model for the JSON produced by the protoc-gen-doc tool'
                packaging = 'jar'
                url = 'https://' + "$githubRepositoryOwner" + '.github.io/' + "$githubRepositoryName" + '/'
                licenses {
                    license {
                        name = 'Apache 2.0 License'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        url = 'https://github.com/orgs/' + "$githubRepositoryOwner" + '/people'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    developerConnection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    url = 'https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '/'
                }
            }
            from components.java
        }
    }
}

nexusPublishing {
    packageGroup = 'com.unblu'
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            username = project.findProperty('s01ossSonatypeUsername') ?: ''
            password = project.findProperty('s01ossSonatypePassword') ?: ''
        }
    }
}

def buildDate() {
    return new Date().format('yyyy-MM-dd')
}

configurations {
    asciidoctorExtensions
}

asciidoctorj {
    version = "$asciidoctorjVersion"
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    sourceDir = file('src/docs/asciidoc')
    baseDirFollowsSourceFile()
    outputDir = file('build/docs/html5')
    attributes = ['revdate'             : "${buildDate()}",
                  'project-version'     : "$version",
                  'maven-group-id'      : "$groupId",
                  'maven-artifact-id'   : "${project.name}",
                  'last-stable-version' : "$lastVersion",
                  'attribute-missing'   : 'warn',
                  'source-highlighter'  : 'coderay',
                  'imagesdir'           : '',
                  'toc'                 : 'left',
                  'icons'               : 'font',
                  'toclevels'           : '3',
                  'sectanchors'         : 'true',
                  'idprefix'            : '',
                  'idseparator'         : '-',
                  'docinfo1'            : 'true']
    repositories {
        mavenCentral()
    }
    dependencies {
        asciidoctorExtensions 'fr.jmini.asciidoctorj:git-link:3.2.2'
    }
}

gitPublish {
    repoUri = 'git@github.com:' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
    branch = 'gh-pages'

    contents {
        from "${file('build/docs/html5')}"
    }

    preserve {
        include '.nojekyll'
        exclude '.DS_Store'
    }

    commitMessage = "Update the 'gh-pages' branch."
}

spotless {
  java {
    importOrder 'java', 'javax', 'org', 'com', ''
    removeUnusedImports()

    // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_jdt_formatter
    eclipse('4.13.0').configFile('.settings/org.eclipse.jdt.core.prefs')
  }
}

def checkLastVersionValueTask = tasks.register('checkLastVersionValue') {
    doLast {
        if(version.endsWith('SNAPSHOT')) {
            throw new GradleException("version '$version' ends with SNAPSHOT, this is not a release build!")
        }
        if(lastVersion != version) {
            throw new GradleException("lastVersion '$lastVersion' does not match version '$version', fix it in the 'gradle.properties' file.")
        }
    }
}

tasks.register('doRelease') {
    dependsOn(
        checkLastVersionValueTask,
        'initializeSonatypeStagingRepository', 
        'publishToSonatype',
        'asciidoctor',
        'gitPublishPush'
    )
}

release {
    buildTasks = ['doRelease']
    git {
        requireBranch = 'main'
    }
}

def updateLastVersionValueTask = tasks.register('updateLastVersionValue') {
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        def newVersion = project.findProperty('release.releaseVersion') ?: version.replace('-SNAPSHOT', '')
        content = content.replaceAll("lastVersion=[0-9a-z\\.\\-]+", "lastVersion=" + newVersion)
        propertiesFile.text = content
    }
}

model {
    tasks.unSnapshotVersion {
        dependsOn updateLastVersionValueTask
    }
    tasks.gitPublishCopy {
        dependsOn asciidoctor
    }
}
